/*
#########################################################################
##                                                                     ##
##     fisher_for_vcf.config                                           ##
##                                                                     ##
##     Gael A. Millot                                                  ##
##     Bioinformatics and Biostatistics Hub                            ##
##     Institut Pasteur Paris                                          ##
##                                                                     ##
#########################################################################
*/

/*
#########################################################################
##                                                                     ##
##     Parameters that must be set by the user                         ##
##                                                                     ##
#########################################################################
*/

/*
##########################
##                      ##
##     Fisher           ##
##                      ##
##########################
*/


env {
    sample_path = "https://zenodo.org/records/10684445/files/example.vcf.gz.zip" // single character string of the vcf file path. Example: "/mnt/c/Users/gmillot/Documents/Git_projects/fisher_for_vcf/dataset/example.vcf.gz". sample_path = "https://zenodo.org/records/10684445/files/example.vcf.gz.zip". Warning: the file must be .gz compressed and be associated with an index .tbi file in the same folder.
    ped_path = "https://zenodo.org/records/10684445/files/pedigree.txt" // single character string of the pedigree file path. Names of indiv must be the same as in the VCF file (last sample fields)
    chr_path = "https://zenodo.org/records/10684445/files/hg19_grch37p5_chr_size_cumul.txt" // single character string of the human chromo infos file path. Example: chr_path = "/mnt/c/Users/gmillot/Documents/Git_projects/fisher_for_vcf/dataset/hg19_grch37p5_chr_size_cumul.txt".
    region = "chr1" // single character string of the region to extract before adding fisher. Write "chr1:11000-15000" for a single region, "chr1:11000-" for a single region non delimited on the right, "chr7:0-147000000,chr10:1000000-2000000" if two regions, ""chr7" for a whole chromosome, "chr7,chr1" for two chromosomes and "none" for the complete genome. Use the -r option of bcftools (writing: chr|chr:pos|chr:beg-end|chr:beg-).
    model = "carrier|strict_heterozygous|recessive" // single character string indicating which model(s) can be used to compute the fisher test. Either "carrier", "strict_heterozygous", "recessive", "carrier|strict_heterozygous", "carrier|recessive", "strict_heterozygous|recessive" or "carrier|strict_heterozygous|recessive". See the README file for details.
    tsv_extra_fields = "AC AF CSQ_SIFT CSQ_PolyPhen" // single character string of the subfields from INFO to add as columns in the tsv file. Example: tsv_extra_fields = "AC AF". Write "CSQ_PolyPhen" for a sub field of the CSQ field of INFO. Write "NULL" if not required. Warning: use a single space between string.
    filter_indiv_DP = "10" // single character string of the threshold for filtering the indiv that have DP >= filter_indiv_DP.See https://gatk.broadinstitute.org/hc/en-us/articles/360035531692-VCF-Variant-Call-Format.
    filter_indiv_GQ = "30" // single character string of the threshold for filtering the indiv that have GQ >= filter_indiv_GQ. See https://gatk.broadinstitute.org/hc/en-us/articles/.
    thread_nb = "10" // single character string of the number of parallelization processes. This number is used to split the vcf (without header) into thread_nb files. Thus it can be higher than the number of available threads. Write "NULL" if no prallelization required 
}

/*
########################
##                    ##
##     Graphics       ##
##                    ##
########################
*/

env{
    miami_plot = "TRUE" // single character string of logical value "TRUE" or "FALSE" indicating if a miamiplot of the fisher table is required. Example: miami_plot = "TRUE". Write "FALSE" to get the res_fisher.tsv file. Then, explore the columns of this file before rerunning the nextflow process using - resume.
    x_lim = "whole" // single character string of the x-axis limits. Either "whole" for the whole genome, "region" to have the regions of the region parameter (i.e., "whole" if region == "none"), or a character string written like the region parameter, to have the x-axis limited to the x_lim parameter. Write "NULL" to does not plot results
    vgrid = "FALSE" // single character string of logical value "TRUE" or "FALSE". Display the chromosome separators in the miami plot? Example: vgrid = "TRUE"
    top_y_column = "NEG_LOG10_P_VALUE_CARRIER_MODEL" // single character string of any of the quantitative column of the res_fisher.tsv file for the y-axis of the manhattan plot at the top of the miami plot. Can also be an added column through the tsv_extra_fields parameter.
    bottom_y_column = "AF" // as the top_y_column parameter but for the bottom manhattan plot of the miami plot. "NULL" generates a simple manhattan plot
    color_column = "NULL" // single character string of one of the column name of the res_fisher.tsv file (see bottom_y_column) in order color the dots. Write "NULL" if not required (dots will be alternatively grey and blue, according to chromo order)
    dot_border_color = "NULL" // single color character string to color the border of the dots. Write "NULL" if not required
    y_lim1 = "NULL" // single character string of the y-axis limits of the top panel in the miami plot, made of two numbers, separated by a single space. Example: y_lim1 = "0 3". Write "NULL" for no particular limit
    y_lim2 = "NULL" // single character string of the y-axis limits of the bottom panel in the miami plot, made of two numbers, separated by a single space. Example: y_lim2 = "0 3" .Write "NULL" for no particular limit. Not considered if bottom_y_column = "NULL"
    y_reverse1 = "FALSE" // single character string of logical value "TRUE" or "FALSE", y-axis coordinates flip for the top panel in the miami plot. Example: y_reverse1 = "TRUE"
    y_reverse2 = "FALSE" // single character string of logical value "TRUE" or "FALSE", y-axis coordinates flip for the bottom panel in the miami plot. Example: y_reverse2 = "TRUE"
    y_threshold1 = "NULL" // single character string made of 1 numeric value for the y-axis threshold of the top panel in the miami plot, beyond which values are of interest. Example: y_threshold1 = "3". Write "NULL" for no particular threshold
    y_threshold2 = "NULL" // single character string made of 1 numeric value for the y-axis threshold of the bottom panel in the miami plot, beyond which values are of interest. Example: y_threshold2 = 3". Write "NULL" for no particular threshold. Not considered if bottom_y_column = "NULL"
    y_log1 = "FALSE" // single character string of logical value "TRUE" or "FALSE", y-axis log10 scale for the top panel in the miami plot. Example: y_log1 = "TRUE"
    y_log2 = "TRUE" // single character string of logical value "TRUE" or "FALSE", y-axis log10 scale for the bottom panel in the miami plot. Example: y_log2 = "TRUE"
}


/*
############################
##                        ##
##     Local / Cluster    ##
##                        ##
############################
*/

// see https://confluence.pasteur.fr/pages/viewpage.action?pageId=69304504
system_exec = 'local' // single character string of the system that runs the workflow. Either 'local' to run on our own computer or 'slurm' to run on the pasteur cluster. Example: system_exec = 'local'
queue = 'common,dedicated' // single character string of the -p option of slurm. Example: queue = 'common,dedicated'. Example: queue = 'hubbioit'
qos = '--qos=ultrafast' // single character string of the --qos option of slurm. Example: qos= '--qos=fast'. Example: qos = '--qos=ultrafast'. Example: qos = '--qos=normal' (only for common). Example: qos = '--qos=hubbioit'
add_options = ' ' // single character string of the additional option of slurm. Example: add_options = '--exclude=maestro-1101,maestro-1034' or add_options = ' ', add_options = '--time=70:00:00' (acceptable time formats include "minutes", "minutes:seconds", "hours:minutes:seconds", "days-hours", "days-hours:minutes" and "days-hours:minutes:seconds"). See https://slurm.schedmd.com/sbatch.html#OPT_time for other options

/*
#############################
##                         ##
##     Other (optional)    ##
##                         ##
#############################
*/

env{
    cute_path = "https://gitlab.pasteur.fr/gmillot/cute_little_R_functions/-/raw/v11.4.0/cute_little_R_functions.R" // single character string indicating the file (and absolute pathway) of the required cute_little_R_functions toolbox. With ethernet connection available, this can also be used: "https://gitlab.pasteur.fr/gmillot/cute_little_R_functions/raw/v5.1.0/cute_little_R_functions.R" or local "C:\\Users\\Gael\\Documents\\Git_projects\\cute_little_R_functions\\cute_little_R_functions.R"
}

apptainer_path = "NULL" // single character string of the path of the apptainer folder (where all the apptainer images are are pulled and stored for proper nextflow execution). Write "NULL" for default path (but will not work in most cases). Example: apptainer_path='/pasteur/zeus/projets/p01/BioIT/gmillot/apptainer'. Example: apptainer_path='/mnt/c/Users/gmillot/apptainer'. Example: apptainer_path="$baseDir/apptainer" # do not forget double quotes
out_path_ini = "$baseDir/results" // single character string of where the output files will be saved. Example out_path_ini = '.' for where the main.nf run is executed or out_path_ini = "$baseDir/results" to put the results in a result folder (created if required), $baseDir indicating where the main.nf run is executed. Example: out_path_ini = '/mnt/c/Users/Gael/Desktop'. Example : out_path_ini="/pasteur/zeus/projets/p01/BioIT/gmillot/08002_bourgeron/results". Warning: this does not work: out_path_ini = "/mnt/share/Users/gael/Desktop"
result_folder_name="fisher_for_vcf" // single character string.of the name of the folder where the results files are dorpped


/*
#########################################################################
##                                                                     ##
##     End Parameters that must be set by the user                     ##
##                                                                     ##
#########################################################################
*/










//////// Pre processing

int secs = (new Date().getTime())/1000
out_path="${out_path_ini}/${result_folder_name}_${secs}"

//////// end Pre processing



//////// variables used here and also in the main.nf file

env {
    system_exec = "${system_exec}"
    out_path_ini = "${out_path_ini}"
    out_path = "${out_path}"
    queue = "${queue}"
    qos = "${qos}"
    add_options = "${add_options}"
}

//////// variables used here and also in the main.nf file





//////// Scopes

// kind of execution. Either 'local' or 'slurm'
// those are closures. See https://www.nextflow.io/docs/latest/script.html#closures
executor {
    name = "${system_exec}"
    queueSize = 2000
}

// create a report folder and print a html report file . If no absolute path, will be where the run is executed
// see https://www.nextflow.io/docs/latest/config.html#config-report
report {
       enabled = true
       file = "${out_path}/reports/report.html" // warning: here double quotes to get the nextflow variable interpretation
}

// txt file with all the processes and info
trace {
    enabled = true
    file = "${out_path}/reports/trace.txt"
}

// html file with all the processes
timeline {
    enabled = true
    file = "${out_path}/reports/timeline.html"
}

// .dot picture of the workflow
dag {
    enabled = true
    file = "${out_path}/reports/nf_dag.png"
}


// define apptainer parameters
apptainer {
    enabled = true
    autoMounts = true // automatically mounts host paths in the executed container
    if(system_exec == 'slurm' || system_exec == 'slurm_local'){
        runOptions = '--no-home --bind /pasteur' //-B /run/shm:/run/shm has been removed because block the pipeline. Warning: clone_assignment process use python. Thus, -B /run/shm:/run/shm should be required normally
    }else{
        runOptions = '--no-home -B /run/shm:/run/shm' // --no-home prevent apptainer to mount the $HOME path and thus forces apptainer to work with only what is inside the container
    }
    //runOptions = '--home $HOME:/home/$USER --bind /pasteur' // provide any extra command line options supported by the apptainer exec. Here, fait un bind de tout /pasteur dans /pasteur du container. Sinon pas d accès
    if(apptainer_path == "NULL"){
        if(system_exec == 'slurm'){
            cacheDir = '/pasteur/zeus/projets/p01/BioIT/gmillot/apptainer' // name of the directory where remote apptainer images are stored. When rerun, the exec directly uses these without redownloading them. When using a computing cluster it must be a shared folder accessible to all computing nodes
        }else if(system_exec == 'slurm_local'){
            cacheDir = 'apptainer' // "$baseDir/apptainer" can be used but do not forget double quotes.
        }else{
            cacheDir = '/mnt/c/Users/gmillot/apptainer' // "$baseDir/apptainer" can be used but do not forget double quotes.
        }
    }else{
        cacheDir = "${apptainer_path}"
    }
}

//////// end Scopes



//////// directives

// provide the default directives for all the processes in the main.nf pipeline calling this config file
process {
// directives for all the processes
    // executor='local' // no need because already defined above in the executor scope
    if(system_exec == 'slurm'){
        queue = "$queue"
        clusterOptions = "$qos $add_options"
        scratch=false
        maxRetries=3
        errorStrategy = {task.exitStatus in 137..143 ? 'retry' : 'terminate' }
    }else{
        maxRetries=0
        errorStrategy='terminate'
    }

    withLabel: bcftools {
        container='gmillot/ubuntu_v22.4_bcftools_v1.18:gitlab_v10.5'
        cpus=1 // only used when name = "local" in the executor part above
        memory='60G' // only used when name = "local" in the executor part above
    }

    withLabel: bash {
        container='gmillot/ubuntu_v22.04_extended_v1.0:gitlab_v10.2'
        cpus=1 // only used when name = "local" in the executor part above
        memory='60G' // only used when name = "local" in the executor part above
    }

    withLabel: python {
        container='gmillot/python_v3.9.10_extended_v3.2:gitlab_v10.6'
        cpus=1 // only used when name = "local" in the executor part above
        memory='20G' // only used when name = "local" in the executor part above
    }

    withLabel: r_ext {
        container='gmillot/r_v4.1.2_extended_v2.1:gitlab_v8.8'
        cpus=1 // only used when name = "local" in the executor part above
        memory='60G' // only used when name = "local" in the executor part above
    }
}

//////// end directives